
/*
 * Payments
 *
 * Enable your customers to make intrabank or IBFT payments through our payment APIs.
 *
 * API version: 1.0.3
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type PaymentsApiService service
/*
PaymentsApiService Make Payments
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param walletId
 * @param optional nil or *PaymentsApiInitiateWalletPaymentOpts - Optional Parameters:
     * @param "Body" (optional.Interface of interface{}) - 
     * @param "XNeemId" (optional.String) - 
     * @param "XNeemPartnerId" (optional.Int32) - 
@return interface{}
*/

type PaymentsApiInitiateWalletPaymentOpts struct {
    Body optional.Interface
    XNeemId optional.String
    XNeemPartnerId optional.Int32
}

func (a *PaymentsApiService) InitiateWalletPayment(ctx context.Context, walletId int32, localVarOptionals *PaymentsApiInitiateWalletPaymentOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/wallets/payment-initiate/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", fmt.Sprintf("%v", walletId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XNeemId.IsSet() {
		localVarHeaderParams["X-Neem-Id"] = parameterToString(localVarOptionals.XNeemId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XNeemPartnerId.IsSet() {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(localVarOptionals.XNeemPartnerId.Value(), "")
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PaymentsApiService Bill Inquiry
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param walletId
 * @param optional nil or *PaymentsApiWalletBillInquiryOpts - Optional Parameters:
     * @param "XNeemId" (optional.String) - 
     * @param "XNeemPartnerId" (optional.Int32) - 
     * @param "EndToEndIdentification" (optional.String) - 
     * @param "ProductId" (optional.String) - 
     * @param "ConsumerNumber" (optional.String) - 
@return interface{}
*/

type PaymentsApiWalletBillInquiryOpts struct {
    XNeemId optional.String
    XNeemPartnerId optional.Int32
    EndToEndIdentification optional.String
    ProductId optional.String
    ConsumerNumber optional.String
}

func (a *PaymentsApiService) WalletBillInquiry(ctx context.Context, walletId string, localVarOptionals *PaymentsApiWalletBillInquiryOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/wallets/bill/inquiry/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", fmt.Sprintf("%v", walletId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.EndToEndIdentification.IsSet() {
		localVarQueryParams.Add("endToEndIdentification", parameterToString(localVarOptionals.EndToEndIdentification.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProductId.IsSet() {
		localVarQueryParams.Add("productId", parameterToString(localVarOptionals.ProductId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ConsumerNumber.IsSet() {
		localVarQueryParams.Add("consumerNumber", parameterToString(localVarOptionals.ConsumerNumber.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XNeemId.IsSet() {
		localVarHeaderParams["X-Neem-Id"] = parameterToString(localVarOptionals.XNeemId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XNeemPartnerId.IsSet() {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(localVarOptionals.XNeemPartnerId.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PaymentsApiService Bill Payment
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param walletId
 * @param optional nil or *PaymentsApiWalletBillPaymentOpts - Optional Parameters:
     * @param "Body" (optional.Interface of interface{}) - 
     * @param "XNeemId" (optional.String) - 
     * @param "XNeemPartnerId" (optional.Int32) - 
@return interface{}
*/

type PaymentsApiWalletBillPaymentOpts struct {
    Body optional.Interface
    XNeemId optional.String
    XNeemPartnerId optional.Int32
}

func (a *PaymentsApiService) WalletBillPayment(ctx context.Context, walletId int32, localVarOptionals *PaymentsApiWalletBillPaymentOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/wallets/bill/payment/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", fmt.Sprintf("%v", walletId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XNeemId.IsSet() {
		localVarHeaderParams["X-Neem-Id"] = parameterToString(localVarOptionals.XNeemId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XNeemPartnerId.IsSet() {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(localVarOptionals.XNeemPartnerId.Value(), "")
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
PaymentsApiService Payment Inquiry
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param walletId
 * @param optional nil or *PaymentsApiWalletPaymentInquiryOpts - Optional Parameters:
     * @param "XNeemId" (optional.String) - 
     * @param "XNeemPartnerId" (optional.Int32) - 
     * @param "EndToEndIdentification" (optional.String) - 
     * @param "PaymentScheme" (optional.String) - 
     * @param "Amount" (optional.String) - 
     * @param "Currency" (optional.String) - 
     * @param "CreditorIdentification" (optional.String) - 
     * @param "CreditorName" (optional.String) - 
     * @param "CreditorInstitutionIdentification" (optional.String) - 
     * @param "CreditorSecondaryIdentification" (optional.String) - 
     * @param "ExtendedProperties" (optional.Interface of []interface{}) - 
@return interface{}
*/

type PaymentsApiWalletPaymentInquiryOpts struct {
    XNeemId optional.String
    XNeemPartnerId optional.Int32
    EndToEndIdentification optional.String
    PaymentScheme optional.String
    Amount optional.String
    Currency optional.String
    CreditorIdentification optional.String
    CreditorName optional.String
    CreditorInstitutionIdentification optional.String
    CreditorSecondaryIdentification optional.String
    ExtendedProperties optional.Interface
}

func (a *PaymentsApiService) WalletPaymentInquiry(ctx context.Context, walletId string, localVarOptionals *PaymentsApiWalletPaymentInquiryOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/wallets/payment-inquiry/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", fmt.Sprintf("%v", walletId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.EndToEndIdentification.IsSet() {
		localVarQueryParams.Add("endToEndIdentification", parameterToString(localVarOptionals.EndToEndIdentification.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PaymentScheme.IsSet() {
		localVarQueryParams.Add("paymentScheme", parameterToString(localVarOptionals.PaymentScheme.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Amount.IsSet() {
		localVarQueryParams.Add("amount", parameterToString(localVarOptionals.Amount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Currency.IsSet() {
		localVarQueryParams.Add("currency", parameterToString(localVarOptionals.Currency.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreditorIdentification.IsSet() {
		localVarQueryParams.Add("creditorIdentification", parameterToString(localVarOptionals.CreditorIdentification.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreditorName.IsSet() {
		localVarQueryParams.Add("creditorName", parameterToString(localVarOptionals.CreditorName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreditorInstitutionIdentification.IsSet() {
		localVarQueryParams.Add("creditorInstitutionIdentification", parameterToString(localVarOptionals.CreditorInstitutionIdentification.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreditorSecondaryIdentification.IsSet() {
		localVarQueryParams.Add("creditorSecondaryIdentification", parameterToString(localVarOptionals.CreditorSecondaryIdentification.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExtendedProperties.IsSet() {
		localVarQueryParams.Add("extendedProperties", parameterToString(localVarOptionals.ExtendedProperties.Value(), "multi"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.XNeemId.IsSet() {
		localVarHeaderParams["X-Neem-Id"] = parameterToString(localVarOptionals.XNeemId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XNeemPartnerId.IsSet() {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(localVarOptionals.XNeemPartnerId.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
